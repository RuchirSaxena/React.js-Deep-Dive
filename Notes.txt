React JS
==============
React JS is a library for building expressive UI's.

Components
===============
-Components are Like Fuctions,
In React Components returns HTLM which is then rendered in the browser.
-Components are Reusable
-Can have private state that hold data , which may change over time

Reactive updates
======================
-React will automatically react ie. whenever there is a change in the state of a component it will automatically will be reflected unlike JS where we have to manully need to update  the DOM elements
-Take updates to the browser.

Virtual DOM in memmory
===========================
- Write HTML in Javascript 
Using Javascript to render HTML helps React to keep a copy of it as Virtual DOM and ,
later it will only update the part of that DOM rather than the whole DOM , this process
is called as Tree reconcilation.



Types of React Component
==========================
1.Functional Component =>Fuction component cannot have state
2.Class Component =>Class component can have state

Example of a simple  Function Component
=======================================
const Button = function(props) {
  return (
    <button>{props.text}</button>
  );
};

ReactDOM.render(<Button text="Hello" />, mountNode);

Example of a simple  Class Component
======================================
class ButtonCounter extends React.Component{
  state ={ counter:0};
  handleClick=()=>{
    this.setState({
    	counter: this.state.counter + 1
    })
    //can also be rewritten as below to improve performance :
     this.setState((prevState)=>( {
    	counter: prevState.counter + 1
    }));
  };
	render() {
      return (
          <button onClick={this.handleClick}>
          {this.state.counter}
          </button>
      );
  }
}


ReactDOM.render(<ButtonCounter /> , mountNode);



Note: Component properties i.e.props  are im-mutable and Functional Components can only have props , Class Component can have props as well as state.

Rules with Component 
==========================================
1. Component can return only one element ie. render method can only return 
one HTML container tag.
ReactDOM.render(
    <div>
        <App />
        <DynamicCounter />
    </div>,
    document.getElementById('root'));

Above , App component and DynamicCounter component are wrapped inside Div tag as render method can only return one element.    

2.Component cannot share its state outside ie. state of the component cannot be accesed outside

class DynamicCounter extends Component{
    state={counter :0} ;
    increaseCounter =()=>{
        this.setState((prevState)=>({
            counter: prevState.counter + 1
        }));
       
    }
    render() {
        return(
            <div>
                Hello this is a Dynamic Component.
                <button onClick={this.increaseCounter}>{this.state.counter}</button>
            </div>
            
        );
    }
}

In Above Example  state={counter :0} ; cannot be accessed outside DynamicCounter component. 

3.Diffrent ways of accesing props in Functional and Class component =>
In Functional Component =>{props.value}
In Class Component =>{this.props.value}

4.Diffrent ways of calling functions with argument
  1st way:
  <button onClick={()=>{this.props.onClickFunction(this.props.incrementValue)}}> 

  2nd way:
   handleClick=()=>{
       this.props.onClickFunction(this.props.incrementValue);
   }
   <button onClick={this.handleClick}>
        +{this.props.incrementValue}
   </button> 


 Props and State
===================
1.The input for the component is props ie. set of value properties that can be passed to a component , the props cannot be chaanged by the component but a whole component can be re-created by diffrent props vlaues ie.Reusable Component
2.A component state can be changed inside the component only using the setState() method and every time a component changes its state a component re-renders itself

Diffrent ways of styling Components
====================================
1.className => using className attribute inside the HTML element and passing class name to it defined in the seperate stylesheet.
Example:
 <div className="Container"></div>

2.style => using the style attribute inside the HTML element and passing the actual style information to it.
Example:
 <div style={{fontSize:'1.25em',fontWeight:'bold'}}>Name Here</div>

Note : In style way the actual style properties are used diffrently ie. using font-size =>fontSize ,font-weight =>fontWeight

Diffrent ways of working with event
====================================
1.Getting value from an input control and using inside function:

1st Way:
//using ref attribute of react to get the reference of textbox value
 <input type="text" placeholder="Github Username"
 ref={(input)=>this.userName=input}/>


//Getting value inside the function
 handleSubmit=(event)=>{
        //every  event in React  receives a native javascript event object 
        event.preventDefault();
        console.log('Event:Form submit:',this.userName.value);
    };               

 Note : we could havre assigned id to the textbox and got its value using document.getElementById() native javascript function
Example :
2nd Way:
//using the id property on textbox
 <form onSubmit={this.handleSubmit}>
                <input type="text" placeholder="Github Username"
                id="txtUserName"/>
 </form>


//Getting the value
 handleSubmit=(event)=>{
        event.preventDefault();
        console.log('Event:Form submit:', document.getElementById("txtUserName").value);
    };

3rd way:
//using the state of React component
<form onSubmit={this.handleSubmit}>
                <input type="text" placeholder="Github Username"
                    // Another way below using state
                    value={this.state.userName}
                    onChange={(event)=>this.setState({userName:event.target.value})}
                />
                <button type="submit">Add Card</button>
</form>

//Getting value inside the function
 handleSubmit=(event)=>{
        //every  event in React  receives a native javascript event object 
        event.preventDefault();
        console.log('Event:Form submit:',this.userName.value);
    };    


How to set the use setState() in component
=============================================
setState() method is used to set the values to state object and when the value of state variables are changed from there prevState the component will re-render itself automatically.
Usage:
  state={
        cards:[]
    }
  //Below code needs to be present inside the function

  this.setState(prevState=>({
            cards:prevState.cards.concat(cardInfo)
        }));

Note: setState() method can take 1 arguments also ie.prevState in above eg. 

Passing Values to Child Components
=======================================
Parents component can pass on Javascript Primitive values or Function Expressions
to the child , the function defination will be a part of Parent Component which can be passed on to the child Components using props , further these child component can invoke/call these passed functions from Parent Component and we can pass in the values of child component as arguments to the function defined in the Parent component ,
Usefull scenarios :-
this is useful in scenarios where 2 child Components depends on the state defined in the Parent Component and using setState() method will update the state which will drilldown  and re-renders the Dom if state changes

Example:

class GithubApp extends Component {
    state={
        cards:[]
    }
    
    addNewCard=(cardInfo)=>{
        console.log(cardInfo);
        this.setState(prevState=>({
            cards:prevState.cards.concat(cardInfo)
        }));
    };

    render() {
        return (
            <div>
                <InputCardData onSubmit={this.addNewCard} />
                <CardList cards={this.state.cards} />
            </div>
        );
    }
}

In Above Example , GithubApp is a Parent component and InputCardData and CardList are the child Components which are dependent on the State value =>Cards ,
InputCardData =>Fetchs new information from server 
CardList => Displays card information

Now , when the addNewCard() receives a new card information from the InputCardData data then the Cards state in the GithubApp component is update which Results in Triggering the re-reder of DOM as the old state is chaanged.




